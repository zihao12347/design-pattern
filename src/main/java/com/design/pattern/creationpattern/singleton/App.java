package com.design.pattern.creationpattern.singleton;

/**
 * 单例模式：
 *    实现形式：
 *          1.懒汉模式：首次调用全局创建对象的方法时才创建实例
 *          2.饥汉模式：类加载时就导致该单例对象被创建
 *    特点：
 *         单例类确保只能创建一个实例
 *         单例类提供一个全局访问点供外部获取
 *    优点：
 *          确保内存中只有一个实例，减少内存的开销
 *    缺点：
 *          单例模式一般没有接口，扩展困难，
 *          单例模式的功能代码全部写在一个类中，如果功能设计不合理，很容易违背单一职责原则
 *    使用场景：
 *          某类需要频繁实例化，而创建的对象又频繁被销毁的时候，如多线程的线程池、网络连接池等。
 *
 *          当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，
 *          并加快对象访问速度。如 Web 中的配置对象、数据库的连接池等。
 */
public class App {
}
